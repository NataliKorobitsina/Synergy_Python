from utils import randbool
from utils import randcell
from utils import randcell2

"""–∫–∞—Ä—Ç–∞ - –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –∫–ª–µ—Ç–æ—á–∫–∏ (–¥–µ—Ä–µ–≤–æ, –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ, –≤–æ–¥–∞).
–í –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–æ—á–∫–µ —Ö—Ä–∞–Ω–∏–º —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è"""
# 0 - –ø–æ–ª–µ
# 1 - –¥–µ—Ä–µ–≤–æ
# 2 - —Ä–µ–∫–∞
# 3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
# 4 - –∞–ø–≥—Ä–µ–π–¥-—à–æ–ø
# 5 - –æ–≥–æ–Ω—å

CELL_TYPES = 'üü©üå≤üåäüè•üè™üî•' # –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞

class Map:

    def generate_river(self, l): # l - –¥–ª–∏–Ω–∞ —Ä–µ–∫–∏
        rc = randcell(self.w, self.h)  # –∫–ª–µ—Ç–æ—á–∫–∞ - –Ω–∞—á–∞–ª–æ —Ä–µ–∫–∏
        rx, ry = rc[0], rc[1]
        self.cells[rx][ry] = 2
        while l > 0:
            rc2 = randcell2(rx, ry)
            rx2, ry2 = rc2[0], rc2[1] 
            if self.check_bounds(rx2, ry2): # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–µ—Ç–∫—É –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –≥—Ä–∞–Ω–∏—Ü–∞–º
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry2
                l-=1

    def generate_forest(self, r, mxr): # r - –æ—Ç—Å–µ—á–∫–∞, mxr - –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–∞
        for ri in range(self.h):
            for ci in range(self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 1

    def generate_tree(self): # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–µ—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–Ω—è—Ç–∞ - —Å—Ç–∞–≤–∏—Ç —Ç—É–¥–∞ –¥–µ—Ä–µ–≤–æ. –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∞ - –Ω–∏—á–µ–≥–æ
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 0: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞ —Å –ø–æ–ª–µ–º
            self.cells[cx][cy] = 0

    def print_map(self):
        print('‚¨õÔ∏è' * (self.w + 2))
        for row in self.cells: # row –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ cells (–∑–Ω–∞—á–µ–Ω–∏–µ —Ä—è–¥–∞)
            print('‚¨õÔ∏è', end='')
            for cell in row: # –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª–µ—Ç–æ—á–∫—É
                if (cell >= 0) and (cell < len(CELL_TYPES)): # –Ω–µ –≤—ã–π–¥–µ–º –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–æ–∫–∏
                    print(CELL_TYPES[cell], end='')
            print('‚¨õÔ∏è')
        print('‚¨õÔ∏è' * (self.w + 2))

    def add_fire(self): # –¥–æ–±–∞–≤–ª—è–µ–º –æ–≥–æ–Ω—å
        c = randcell(self.w, self.h) # —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–ª–µ—Ç–æ—á–∫–∞
        cx, cy = c[0], c[1]
        if self.cells[cx][cy] == 1: # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–º –¥–µ—Ä–µ–≤–æ
            self.cells[cx][cy] = 5

    def update_fires(self): # —É–¥–∞–ª—è–µ—Ç –æ–≥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–≥–æ—Ä–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ
        for ri in range(self.h): # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –æ–≥–Ω—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ—Ç—É—à–∏–ª–∏
            for ci in range(self.w):
                cell = self.cells[ri][ci]
                if cell == 5:
                    self.cells[ri][ci] = 0 # –Ω–∞ –∏—Ö –º–µ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –ø–æ–ª–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ 5 –æ–≥–Ω–µ–π
        for i in range(5):
            self.add_fire()

    def check_bounds(self, x, y): # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
        if (x < 0) or (y < 0) or (x >= self.h) or (y >= self.w): # x –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ –ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏ –≤–Ω–∏–∑, y - –Ω–∞–ø—Ä–∞–≤–æ
            return False
        return True

    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)] # –≤–µ–∑–¥–µ –ø–æ–ª–µ ("0"). w –∫–ª–µ—Ç–æ—á–µ–∫ –≤ h —Å—Ç—Ä–æ–∫–µ

